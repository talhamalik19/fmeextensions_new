import { useEffect, useRef, useState } from 'react'
import dlv from 'dlv';
import dynamic from 'next/dynamic';
const Lightbox = dynamic(() => import('yet-another-react-lightbox'), {
    ssr: true,
})
import Zoom from "yet-another-react-lightbox/plugins/zoom";
import Image from 'next/image';
import { imageLoader } from '@/components/shared/imageLoader';
import VideoDialog from './VideoDialog';
import ShareDialog from './ShareDialog';

export default function ProductImageGal({ blockContent, setVideoOpen, videoOpen, pdImage, productThumb, pageName, productBasicInfo, MobileDevice, showShareCta, shareCta }) {
    const [open, setOpen] = useState(false);
    const [selectedGalleryIndex, setSelectedGalleryIndex] = useState(0);

    // Take the height of one column and assign it to other
    const mainSliderRef = useRef(null);
    const thumbSliderRef = useRef(null);

    useEffect(() => {
        function setThumbSliderHeight() {
            if (mainSliderRef.current && thumbSliderRef.current) {
                const windowWidth = window.innerWidth;
                let sliderHeight;

                // Customize the height based on different screen sizes
                if (windowWidth < 600) {
                    sliderHeight = 60; // Set a fixed height for screen widths less than 600 pixels
                } else {
                    sliderHeight = mainSliderRef.current.offsetHeight;
                }

                thumbSliderRef.current.style.height = `${sliderHeight || 425}px`;
            }
        }

        // Call the function on initial mount and when the window is resized
        setThumbSliderHeight();
        window.addEventListener('resize', setThumbSliderHeight);

        // Clean up the event listener on component unmount
        return () => {
            window.removeEventListener('resize', setThumbSliderHeight);
        };
    }, []);

    const slides = dlv(productThumb, 'custom_gallery') && dlv(productThumb, 'custom_gallery')
        .filter((item) => !dlv(item, 'disabled'))
        .map((item) => ({
            src: dlv(item, 'url'),
            width: 3840,
            height: 2560,
            srcSet: [
                { src: dlv(item, 'url'), width: 320, height: 213 },
                { src: dlv(item, 'url'), width: 640, height: 426 },
                { src: dlv(item, 'url'), width: 1200, height: 800 },
                { src: dlv(item, 'url'), width: 2048, height: 1365 },
                { src: dlv(item, 'url'), width: 3840, height: 2560 },
            ],
        }));
    const video = dlv(productThumb, 'media_gallery') && dlv(productThumb, 'media_gallery').filter((item) => dlv(item, 'video_content'))
    

    const closeModal =() =>{
        showShareCta(false);
        document.body.style.overflow = 'auto';
    }
    const openModal =() =>{
        showShareCta(true);
    }

    const videoUrl = video.length ? dlv(video[0], 'url') : null;
    const imageUrl = dlv(productThumb, 'image.url');
    const altText = video.length
      ? dlv(video[0], 'video_content.video_title')
      : dlv(productThumb, 'image.label');
  
    const handleClick = () => {
      if (video.length) {
        setVideoOpen(true);
      } else {
        setOpen(true);
      }
      setSelectedGalleryIndex(0);
    };
    return (

        <>
            {
                pageName === "product_detail" ?
                    < div className="product_image_gallery">
                        {/* MAin Product Slider */}
                        <div className="main_slider">
                        <Image
                            src={videoUrl || imageUrl} // Using the video URL if available, otherwise the image URL
                            alt={altText || 'Product Image'} // Fallback alt text
                            width={560}
                            height={520}
                            className='cursor-pointer'
                            onClick={handleClick}
                            // Use objectFit for proper scaling
                            style={{ objectFit: 'contain', width: '100%', height: 'auto' }}
                            priority // Use only if this image is critical for initial view
                            quality={75} // Use a lower quality value if possible for compression
                            sizes="(max-width: 600px) 100vw, 560px" // Responsive sizes for better image loading
                            />
                            {dlv(video, 'length') > 0 && <div className="video_icon"
                                onClick={() => {
                                    setVideoOpen(true);
                                    setSelectedGalleryIndex(0)
                                    document.body.style.overflow = 'hidden';
                                }}>
                                {dlv(blockContent, 'videoIcon.0.url') && <Image
                                loader={imageLoader}
                                    src={dlv(blockContent, 'videoIcon.0.url')}
                                    alt={`${dlv(blockContent, 'videoIcon.0.alt')}`}
                                    width={120}
                                    height={120}
                                    style={{ height: 'auto', maxWidth: '100%' }}
                                />}
                            </div>}

                            <div className='icon_block'>

                             <button className='sh_icon sh_icon' style={{display:'none'}}>
                               <svg xmlns="http://www.w3.org/2000/svg" width="20" height="19" viewBox="0 0 20 19" fill="none">
                                <mask id="path-1-outside-1_5224_5811" maskUnits="userSpaceOnUse" x="0" y="0" width="20" height="19" fill="black">
                                <rect fill="white" width="20" height="19"/>
                                <path d="M9.98 18C9.78533 18 9.593 17.9611 9.403 17.8833C9.213 17.8055 9.04533 17.687 8.9 17.5278L7.752 16.3885C5.972 14.609 4.402 12.8782 3.042 11.1963C1.68067 9.51504 1 7.76742 1 5.95338C1 4.55322 1.432 3.37762 2.296 2.42657C3.16 1.47552 4.228 1 5.5 1C6.22933 1 6.989 1.20291 7.779 1.60872C8.56833 2.01453 9.30867 2.77955 10 3.90378C10.6913 2.77955 11.4317 2.01453 12.221 1.60872C13.011 1.20291 13.7707 1 14.5 1C15.772 1 16.84 1.47552 17.704 2.42657C18.568 3.37762 19 4.55322 19 5.95338C19 7.80925 18.2917 9.5932 16.875 11.3052C15.4583 13.0165 13.9077 14.7128 12.223 16.394L11.081 17.5278C10.9357 17.6878 10.7647 17.8063 10.568 17.8833C10.3713 17.9604 10.1757 17.9993 9.981 18M9.511 5.04746C8.91233 3.98487 8.29 3.22792 7.644 2.77661C6.998 2.32604 6.28333 2.10075 5.5 2.10075C4.5 2.10075 3.66667 2.46767 3 3.2015C2.33333 3.93534 2 4.85263 2 5.95338C2 6.76647 2.209 7.6001 2.627 8.45429C3.045 9.3092 3.60633 10.1847 4.311 11.0807C5.015 11.976 5.82433 12.8925 6.739 13.8304C7.65433 14.7675 8.60667 15.7321 9.596 16.7242C9.71133 16.8365 9.846 16.8926 10 16.8926C10.154 16.8926 10.2887 16.8365 10.404 16.7242C11.3933 15.7321 12.3457 14.7671 13.261 13.8293C14.1757 12.8929 14.985 11.9767 15.689 11.0807C16.3937 10.1847 16.955 9.3092 17.373 8.45429C17.791 7.6001 18 6.76647 18 5.95338C18 4.85263 17.6667 3.93534 17 3.2015C16.3333 2.46767 15.5 2.10075 14.5 2.10075C13.7167 2.10075 13.002 2.32604 12.356 2.77661C11.7093 3.22792 11.0867 3.98487 10.488 5.04746C10.436 5.14653 10.365 5.22065 10.275 5.26981C10.185 5.31898 10.0933 5.34356 10 5.34356C9.90667 5.34356 9.815 5.31898 9.725 5.26981C9.635 5.22065 9.564 5.14653 9.512 5.04746"/>
                                </mask>
                                <path d="M9.98 18C9.78533 18 9.593 17.9611 9.403 17.8833C9.213 17.8055 9.04533 17.687 8.9 17.5278L7.752 16.3885C5.972 14.609 4.402 12.8782 3.042 11.1963C1.68067 9.51504 1 7.76742 1 5.95338C1 4.55322 1.432 3.37762 2.296 2.42657C3.16 1.47552 4.228 1 5.5 1C6.22933 1 6.989 1.20291 7.779 1.60872C8.56833 2.01453 9.30867 2.77955 10 3.90378C10.6913 2.77955 11.4317 2.01453 12.221 1.60872C13.011 1.20291 13.7707 1 14.5 1C15.772 1 16.84 1.47552 17.704 2.42657C18.568 3.37762 19 4.55322 19 5.95338C19 7.80925 18.2917 9.5932 16.875 11.3052C15.4583 13.0165 13.9077 14.7128 12.223 16.394L11.081 17.5278C10.9357 17.6878 10.7647 17.8063 10.568 17.8833C10.3713 17.9604 10.1757 17.9993 9.981 18M9.511 5.04746C8.91233 3.98487 8.29 3.22792 7.644 2.77661C6.998 2.32604 6.28333 2.10075 5.5 2.10075C4.5 2.10075 3.66667 2.46767 3 3.2015C2.33333 3.93534 2 4.85263 2 5.95338C2 6.76647 2.209 7.6001 2.627 8.45429C3.045 9.3092 3.60633 10.1847 4.311 11.0807C5.015 11.976 5.82433 12.8925 6.739 13.8304C7.65433 14.7675 8.60667 15.7321 9.596 16.7242C9.71133 16.8365 9.846 16.8926 10 16.8926C10.154 16.8926 10.2887 16.8365 10.404 16.7242C11.3933 15.7321 12.3457 14.7671 13.261 13.8293C14.1757 12.8929 14.985 11.9767 15.689 11.0807C16.3937 10.1847 16.955 9.3092 17.373 8.45429C17.791 7.6001 18 6.76647 18 5.95338C18 4.85263 17.6667 3.93534 17 3.2015C16.3333 2.46767 15.5 2.10075 14.5 2.10075C13.7167 2.10075 13.002 2.32604 12.356 2.77661C11.7093 3.22792 11.0867 3.98487 10.488 5.04746C10.436 5.14653 10.365 5.22065 10.275 5.26981C10.185 5.31898 10.0933 5.34356 10 5.34356C9.90667 5.34356 9.815 5.31898 9.725 5.26981C9.635 5.22065 9.564 5.14653 9.512 5.04746" fill="#3673B2"/>
                                <path d="M8.9 17.5278L9.0479 17.3928L9.04088 17.3858L8.9 17.5278ZM7.752 16.3885L7.61059 16.5299L7.61112 16.5305L7.752 16.3885ZM3.042 11.1963L3.19752 11.0705L3.19743 11.0704L3.042 11.1963ZM7.779 1.60872L7.87045 1.43085L7.87038 1.43081L7.779 1.60872ZM10 3.90378L9.82963 4.00855L10 4.28559L10.1704 4.00855L10 3.90378ZM12.221 1.60872L12.1296 1.43081L12.1296 1.43085L12.221 1.60872ZM16.875 11.3052L17.0291 11.4328L17.0291 11.4327L16.875 11.3052ZM12.223 16.394L12.3639 16.5359L12.3643 16.5356L12.223 16.394ZM11.081 17.5278L10.9399 17.3857L10.933 17.3933L11.081 17.5278ZM7.644 2.77661L7.75854 2.61266L7.75841 2.61257L7.644 2.77661ZM2.627 8.45429L2.80667 8.36644L2.80664 8.36638L2.627 8.45429ZM4.311 11.0807L4.46821 10.9571L4.46821 10.957L4.311 11.0807ZM6.739 13.8304L6.59582 13.97L6.59593 13.9701L6.739 13.8304ZM9.596 16.7242L9.45436 16.8655L9.45649 16.8675L9.596 16.7242ZM10.404 16.7242L10.5435 16.8676L10.5456 16.8654L10.404 16.7242ZM13.261 13.8293L13.1179 13.6895L13.1179 13.6896L13.261 13.8293ZM15.689 11.0807L15.5318 10.957L15.5317 10.9571L15.689 11.0807ZM17.373 8.45429L17.1934 8.36638L17.1933 8.36644L17.373 8.45429ZM12.356 2.77661L12.2416 2.61257L12.2415 2.6126L12.356 2.77661ZM10.488 5.04746L10.3137 4.94925L10.3109 4.95451L10.488 5.04746ZM9.98 17.8C9.81272 17.8 9.64606 17.7667 9.47878 17.6982L9.32722 18.0684C9.53994 18.1555 9.75794 18.2 9.98 18.2V17.8ZM9.47878 17.6982C9.31756 17.6322 9.17412 17.5314 9.04772 17.393L8.75227 17.6626C8.91655 17.8426 9.10844 17.9788 9.32722 18.0684L9.47878 17.6982ZM9.04088 17.3858L7.89288 16.2465L7.61112 16.5305L8.75912 17.6697L9.04088 17.3858ZM7.8934 16.2471C6.1176 14.4717 4.55245 12.7462 3.19752 11.0705L2.88648 11.322C4.25155 13.0102 5.8264 14.7462 7.6106 16.5299L7.8934 16.2471ZM3.19743 11.0704C1.85916 9.41766 1.2 7.71319 1.2 5.95338H0.8C0.8 7.82164 1.50217 9.61243 2.88657 11.3221L3.19743 11.0704ZM1.2 5.95338C1.2 4.59811 1.61659 3.47186 2.44403 2.56106L2.14797 2.29209C1.24741 3.28338 0.8 4.50834 0.8 5.95338H1.2ZM2.44403 2.56106C3.27057 1.65125 4.28502 1.2 5.5 1.2V0.8C4.17098 0.8 3.04943 1.2998 2.14797 2.29209L2.44403 2.56106ZM5.5 1.2C6.19136 1.2 6.91981 1.39221 7.68761 1.78662L7.87038 1.43081C7.05819 1.0136 6.26731 0.8 5.5 0.8V1.2ZM7.68755 1.78659C8.43227 2.16946 9.14874 2.90129 9.82963 4.00855L10.1704 3.79902C9.46859 2.6578 8.7044 1.85959 7.87045 1.43085L7.68755 1.78659ZM10.1704 4.00855C10.8513 2.90129 11.5677 2.16946 12.3124 1.78659L12.1296 1.43085C11.2956 1.85959 10.5314 2.6578 9.82963 3.79902L10.1704 4.00855ZM12.3124 1.78662C13.0802 1.39221 13.8086 1.2 14.5 1.2V0.8C13.7327 0.8 12.9418 1.0136 12.1296 1.43081L12.3124 1.78662ZM14.5 1.2C15.715 1.2 16.7294 1.65125 17.556 2.56106L17.852 2.29209C16.9506 1.2998 15.829 0.8 14.5 0.8V1.2ZM17.556 2.56106C18.3834 3.47186 18.8 4.59811 18.8 5.95338H19.2C19.2 4.50834 18.7526 3.28338 17.852 2.29209L17.556 2.56106ZM18.8 5.95338C18.8 7.75395 18.114 9.49418 16.7209 11.1777L17.0291 11.4327C18.4693 9.69221 19.2 7.86455 19.2 5.95338H18.8ZM16.7209 11.1777C15.3086 12.8838 13.7622 14.5754 12.0817 16.2524L12.3643 16.5356C14.0531 14.8502 15.6081 13.1493 17.0291 11.4328L16.7209 11.1777ZM12.0821 16.2521L10.9401 17.3858L11.2219 17.6697L12.3639 16.5359L12.0821 16.2521ZM10.933 17.3933C10.8078 17.531 10.6624 17.6316 10.495 17.6971L10.641 18.0695C10.867 17.981 11.0635 17.8445 11.229 17.6623L10.933 17.3933ZM10.495 17.6971C10.3194 17.7659 10.1482 17.7994 9.98025 17.8L9.98175 18.2C10.2032 18.1992 10.4232 18.1548 10.641 18.0695L10.495 17.6971ZM9.68525 4.94929C9.07913 3.87348 8.43891 3.08798 7.75854 2.61266L7.52946 2.94056C8.14109 3.36786 8.74553 4.09626 9.33675 5.14563L9.68525 4.94929ZM7.75841 2.61257C7.07905 2.13873 6.32449 1.90075 5.5 1.90075V2.30075C6.24218 2.30075 6.91695 2.51335 7.52958 2.94065L7.75841 2.61257ZM5.5 1.90075C4.44418 1.90075 3.55691 2.29105 2.85197 3.06702L3.14803 3.33599C3.77642 2.64429 4.55582 2.30075 5.5 2.30075V1.90075ZM2.85197 3.06702C2.14808 3.84182 1.8 4.80882 1.8 5.95338H2.2C2.2 4.89644 2.51859 4.02885 3.14803 3.33599L2.85197 3.06702ZM1.8 5.95338C1.8 6.8017 2.01822 7.66527 2.44736 8.5422L2.80664 8.36638C2.39977 7.53494 2.2 6.73124 2.2 5.95338H1.8ZM2.44733 8.54214C2.87261 9.41194 3.44205 10.2993 4.15379 11.2043L4.46821 10.957C3.77062 10.07 3.21739 9.20647 2.80667 8.36644L2.44733 8.54214ZM4.15378 11.2043C4.86277 12.1059 5.67691 13.0278 6.59582 13.97L6.88218 13.6907C5.97175 12.7572 5.16723 11.846 4.46821 10.9571L4.15378 11.2043ZM6.59593 13.9701C7.51177 14.9077 8.46459 15.8729 9.45438 16.8654L9.73762 16.583C8.74874 15.5913 7.79689 14.6272 6.88207 13.6906L6.59593 13.9701ZM9.45649 16.8675C9.60729 17.0143 9.79133 17.0926 10 17.0926V16.6926C9.90067 16.6926 9.81537 16.6587 9.73551 16.5809L9.45649 16.8675ZM10 17.0926C10.2087 17.0926 10.3927 17.0143 10.5435 16.8675L10.2645 16.5809C10.1846 16.6587 10.0993 16.6926 10 16.6926V17.0926ZM10.5456 16.8654C11.5354 15.8728 12.4883 14.9073 13.4041 13.9689L13.1179 13.6896C12.2031 14.6269 11.2512 15.5913 10.2624 16.583L10.5456 16.8654ZM13.4041 13.969C14.323 13.0282 15.1372 12.1067 15.8463 11.2042L15.5317 10.9571C14.8328 11.8467 14.0283 12.7575 13.1179 13.6895L13.4041 13.969ZM15.8462 11.2043C16.5579 10.2993 17.1274 9.41194 17.5527 8.54214L17.1933 8.36644C16.7826 9.20647 16.2294 10.07 15.5318 10.957L15.8462 11.2043ZM17.5526 8.5422C17.9818 7.66527 18.2 6.8017 18.2 5.95338H17.8C17.8 6.73124 17.6002 7.53494 17.1934 8.36638L17.5526 8.5422ZM18.2 5.95338C18.2 4.80882 17.8519 3.84182 17.148 3.06702L16.852 3.33599C17.4814 4.02885 17.8 4.89644 17.8 5.95338H18.2ZM17.148 3.06702C16.4431 2.29105 15.5558 1.90075 14.5 1.90075V2.30075C15.4442 2.30075 16.2236 2.64429 16.852 3.33599L17.148 3.06702ZM14.5 1.90075C13.6755 1.90075 12.9209 2.13873 12.2416 2.61257L12.4704 2.94065C13.083 2.51335 13.7578 2.30075 14.5 2.30075V1.90075ZM12.2415 2.6126C11.5605 3.08792 10.9199 3.87344 10.3138 4.94929L10.6622 5.14563C11.2534 4.0963 11.8582 3.36792 12.4705 2.94062L12.2415 2.6126ZM10.3109 4.95451C10.2755 5.02197 10.2313 5.06576 10.1791 5.0943L10.3709 5.44533C10.4986 5.37553 10.5965 5.27109 10.6651 5.14041L10.3109 4.95451ZM10.1791 5.0943C10.1155 5.12902 10.0566 5.14356 10 5.14356V5.54356C10.1301 5.54356 10.2544 5.50894 10.3709 5.44533L10.1791 5.0943ZM10 5.14356C9.94341 5.14356 9.88445 5.12902 9.82088 5.0943L9.62912 5.44533C9.74555 5.50894 9.86993 5.54356 10 5.54356V5.14356ZM9.82088 5.0943C9.76865 5.06576 9.72449 5.02197 9.68909 4.95451L9.33491 5.14041C9.4035 5.27109 9.50135 5.37553 9.62912 5.44533L9.82088 5.0943Z" fill="#3673B2" mask="url(#path-1-outside-1_5224_5811)"/>
                                </svg>
                             </button>
                             <button className='sh_icon sh_icon' onClick={openModal}>
                               <svg xmlns="http://www.w3.org/2000/svg" width="14" height="19" viewBox="0 0 14 19" fill="none">
                               <path d="M1.5835 8.12498V16.875C1.5835 16.99 1.67683 17.0833 1.79183 17.0833H12.2085C12.2638 17.0833 12.3167 17.0614 12.3558 17.0223C12.3949 16.9832 12.4168 16.9302 12.4168 16.875V8.12498C12.4168 8.06973 12.3949 8.01674 12.3558 7.97767C12.3167 7.9386 12.2638 7.91665 12.2085 7.91665H10.1252C9.9594 7.91665 9.80043 7.8508 9.68322 7.73359C9.56601 7.61638 9.50016 7.45741 9.50016 7.29165C9.50016 7.12589 9.56601 6.96691 9.68322 6.8497C9.80043 6.73249 9.9594 6.66665 10.1252 6.66665H12.2085C13.0135 6.66665 13.6668 7.31998 13.6668 8.12498V16.875C13.6668 17.2618 13.5132 17.6327 13.2397 17.9062C12.9662 18.1797 12.5953 18.3333 12.2085 18.3333H1.79183C1.40506 18.3333 1.03412 18.1797 0.760632 17.9062C0.487142 17.6327 0.333496 17.2618 0.333496 16.875V8.12498C0.333496 7.31998 0.986829 6.66665 1.79183 6.66665H3.87516C4.04092 6.66665 4.19989 6.73249 4.3171 6.8497C4.43431 6.96691 4.50016 7.12589 4.50016 7.29165C4.50016 7.45741 4.43431 7.61638 4.3171 7.73359C4.19989 7.8508 4.04092 7.91665 3.87516 7.91665H1.79183C1.73658 7.91665 1.68359 7.9386 1.64452 7.97767C1.60545 8.01674 1.5835 8.06973 1.5835 8.12498ZM7.44183 1.01665L10.1502 3.72498C10.2324 3.80137 10.2926 3.89854 10.3243 4.00625C10.3559 4.11396 10.358 4.22821 10.3302 4.33698C10.3024 4.44575 10.2457 4.54501 10.1662 4.62429C10.0867 4.70358 9.98734 4.75995 9.8785 4.78748C9.76985 4.81533 9.65571 4.81338 9.54807 4.78186C9.44043 4.75033 9.34328 4.69038 9.26683 4.60831L7.62516 2.96665V11.875C7.62516 12.0407 7.55931 12.1997 7.4421 12.3169C7.32489 12.4341 7.16592 12.5 7.00016 12.5C6.8344 12.5 6.67543 12.4341 6.55822 12.3169C6.44101 12.1997 6.37516 12.0407 6.37516 11.875V2.96665L4.7335 4.60831C4.61494 4.71865 4.45824 4.77874 4.2963 4.77594C4.13437 4.77314 3.97983 4.70768 3.86516 4.59331C3.75079 4.47864 3.68533 4.3241 3.68253 4.16217C3.67974 4.00024 3.73982 3.84353 3.85016 3.72498L6.5585 1.01665C6.67568 0.899604 6.83454 0.833862 7.00016 0.833862C7.16579 0.833862 7.32464 0.899604 7.44183 1.01665Z" fill="#494949"/>
                               </svg>
                             </button>
                        </div>
                        </div>
                        {/* Thumbnail Product Slider */}
                        {!MobileDevice &&
                            <div className="thumb_slider">
                                {
                                    slides && slides.map((pdGal, index) =>
                                        <div className="thumb_slider_inner" key={`pd-gal-${index}`}>
                                            <Image
                                                src={dlv(pdGal, 'src')}
                                                alt={`main-image`}
                                                width={170}
                                                height={130}
                                                onClick={() => {
                                                    setOpen(true);
                                                    setSelectedGalleryIndex(index)
                                                }}
                                                className='cursor-pointer'
                                                style={{  }}
                                            />
                                        </div>
                                    )
                                }
                            </div>
                        }
                    </div >
                    : <div className='buyNow_prod_thumb'>
                        <img
                            key={`product-thumb-${dlv(productThumb.image, 'label')}`}
                            src={dlv(productThumb.image, 'url')}
                            alt={`${dlv(productThumb.image, 'label')}`}
                            width={500}
                            height={250}
                            style={{ height: 'auto', maxWidth: '100%', width: 'auto', margin: 'auto' }}
                        />
                    </div>
            }
            <Lightbox
                open={open}
                close={() => setOpen(false)}
                plugins={[Zoom]}
                showPrevNext={false}
                slides={slides}
                index={selectedGalleryIndex}
            />
            <VideoDialog video={video} videoOpen={videoOpen} setVideoOpen={setVideoOpen} />
            <ShareDialog closeModal={closeModal} shareCta={shareCta}/>

        </>
    )
}
